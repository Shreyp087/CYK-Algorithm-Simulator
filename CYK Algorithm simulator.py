#!/usr/bin/env python
# coding: utf-8

# In[5]:


import tkinter as tk
    
def CYK_algorithm(input_string, grammar):
    n = len(input_string)
    table = [[set() for j in range(n-i)] for i in range(n)]

    # Initialize table with terminals that can generate the input string
    for i in range(n):
        for nonterminal, production in grammar:
            if production == input_string[i]:
                table[i][0].add(nonterminal)

    # Fill table with nonterminals that can generate the substrings
    for i in range(1, n):
        for j in range(n-i):
            for k in range(i):
                left_substring = table[j][k]
                right_substring = table[j+k+1][i-k-1]
                for nonterminal, production in grammar:
                    if (len(production) == 2 and
                        production[0] in left_substring and
                        production[1] in right_substring):
                        table[j][i].add(nonterminal)

    # Check if the start symbol can generate the input string
    return table


class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.create_widgets()

    def create_widgets(self):
        # Create input string label and text box
        self.input_label = tk.Label(self.master, text="Input String:")
        self.input_label.pack()
        self.input_text = tk.Text(self.master, height=1)
        self.input_text.pack()

        # Create grammar label and text box
        self.grammar_label = tk.Label(self.master, text="Grammar:")
        self.grammar_label.pack()
        self.grammar_text = tk.Text(self.master, height=10)
        self.grammar_text.pack()

        # Create CYK algorithm button
        self.cyk_button = tk.Button(self.master, text="CYK Algorithm", command=self.run_cyk_algorithm)
        self.cyk_button.pack()

        # Create result label and text box
        self.result_label = tk.Label(self.master, text="Result:")
        self.result_label.pack()
        self.result_text = tk.Text(self.master, height=1, state=tk.DISABLED)
        self.result_text.pack()

        # Create table label and text box
        self.table_label = tk.Label(self.master, text="CYK Parsing Table:")
        self.table_label.pack()
        self.table_text = tk.Text(self.master, height=10, state=tk.DISABLED)
        self.table_text.pack()

    def run_cyk_algorithm(self):
        # Get input string and grammar from text boxes
        input_string = self.input_text.get("1.0", tk.END).strip()
        grammar_text = self.grammar_text.get("1.0", tk.END).strip()

        # Parse grammar text into list of rules
        grammar = []
        for line in grammar_text.split("\n"):
            rule_parts = line.split("->")
            nonterminal = rule_parts[0].strip()
            productions = [prod.strip() for prod in rule_parts[1].split("|")]
            for prod in productions:
                grammar.append((nonterminal, prod))

        # Run CYK algorithm on input string and grammar
        table = CYK_algorithm(input_string, grammar)

        # Display result in result text box
        self.result_text.config(state=tk.NORMAL)
        if 'S' in table[0][len(input_string) - 1]:
            self.result_text.delete("1.0", tk.END)
            self.result_text.insert(tk.END, "Input string can be generated by grammar.")
        else:
            self.result_text.delete("1.0", tk.END)
            self.result_text.insert(tk.END, "Input string cannot be generated by grammar.")

        # Display CYK parsing table in table text box
        self.table_text.config(state=tk.NORMAL)
        self.table_text.delete("1.0", tk.END)
        for row in table:
            row_string = ""
            for cell in row:
                row_string += " ".join(cell) + "\t"
            self.table_text.insert(tk.END, row_string + "\n")
        self.table_text.config(state=tk.DISABLED)

if __name__ == '__main__':
    root = tk.Tk()
    app = Application(master=root)
    app.mainloop()


# In[ ]:




